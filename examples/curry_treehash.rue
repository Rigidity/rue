const OP_Q: Bytes = 1 as Bytes;
const OP_A: Bytes = 2 as Bytes;
const OP_C: Bytes = 4 as Bytes;

const ONE: Bytes = 1 as Bytes;
const TWO: Bytes = 2 as Bytes;

fun update_hash_for_parameter_hash(parameter_hash: Bytes32, environment_hash: Bytes32) -> Bytes32 {
    let rest = sha256(TWO + environment_hash + sha256(ONE + nil));
    let quoted_param = sha256(TWO + sha256(ONE + OP_Q) + parameter_hash);
    let prepended = sha256(TWO + quoted_param + rest);
    sha256(TWO + sha256(ONE + OP_C) + prepended)
}

fun build_curry_list(reversed_arg_hashes: Bytes32[], environment_hash: Bytes32) -> Bytes32 {
    if reversed_arg_hashes is Nil {
        return environment_hash;
    }
    let updated_hash = update_hash_for_parameter_hash(reversed_arg_hashes.first, environment_hash);
    build_curry_list(reversed_arg_hashes.rest, updated_hash)
}

fun tree_hash_of_apply(function_hash: Bytes32, environment_hash: Bytes32) -> Bytes32 {
    let rest = sha256(TWO + environment_hash + sha256(ONE + nil));
    let quoted_body = sha256(TWO + sha256(ONE + OP_Q) + function_hash);
    let prepended = sha256(TWO + quoted_body + rest);
    sha256(TWO + sha256(ONE + OP_A) + prepended)
}

fun curry_tree_hash(function_hash: Bytes32, ...reversed_arg_hashes: Bytes32[]) -> Bytes32 {
    tree_hash_of_apply(function_hash, build_curry_list(reversed_arg_hashes, sha256(ONE + ONE)))
}

fun main(function_hash: Bytes32, reversed_arg_hashes: Bytes32[]) -> Bytes32 {
    curry_tree_hash(function_hash, ...reversed_arg_hashes)
}
