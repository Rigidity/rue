use clvmr::{Allocator, NodePtr};

#[derive(Debug, Clone, Copy)]
pub(crate) struct Ops {
    pub q: NodePtr,
    pub a: NodePtr,
    pub i: NodePtr,
    pub c: NodePtr,
    pub f: NodePtr,
    pub r: NodePtr,
    pub l: NodePtr,
    pub x: NodePtr,
    pub eq: NodePtr,
    pub gt_bytes: NodePtr,
    pub sha256: NodePtr,
    pub substr: NodePtr,
    pub strlen: NodePtr,
    pub concat: NodePtr,
    pub add: NodePtr,
    pub sub: NodePtr,
    pub mul: NodePtr,
    pub div: NodePtr,
    pub divmod: NodePtr,
    pub gt: NodePtr,
    pub ash: NodePtr,
    pub logand: NodePtr,
    pub logior: NodePtr,
    pub logxor: NodePtr,
    pub lognot: NodePtr,
    pub point_add: NodePtr,
    pub pubkey_for_exp: NodePtr,
    pub not: NodePtr,
    pub any: NodePtr,
    pub all: NodePtr,
    pub rem: NodePtr,
}

impl Ops {
    pub fn alloc(allocator: &mut Allocator) -> Self {
        Self {
            q: allocator.one(),
            a: allocator.new_small_number(2).unwrap(),
            i: allocator.new_small_number(3).unwrap(),
            c: allocator.new_small_number(4).unwrap(),
            f: allocator.new_small_number(5).unwrap(),
            r: allocator.new_small_number(6).unwrap(),
            l: allocator.new_small_number(7).unwrap(),
            x: allocator.new_small_number(8).unwrap(),
            eq: allocator.new_small_number(9).unwrap(),
            gt_bytes: allocator.new_small_number(10).unwrap(),
            sha256: allocator.new_small_number(11).unwrap(),
            substr: allocator.new_small_number(12).unwrap(),
            strlen: allocator.new_small_number(13).unwrap(),
            concat: allocator.new_small_number(14).unwrap(),
            add: allocator.new_small_number(16).unwrap(),
            sub: allocator.new_small_number(17).unwrap(),
            mul: allocator.new_small_number(18).unwrap(),
            div: allocator.new_small_number(19).unwrap(),
            divmod: allocator.new_small_number(20).unwrap(),
            gt: allocator.new_small_number(21).unwrap(),
            ash: allocator.new_small_number(22).unwrap(),
            logand: allocator.new_small_number(24).unwrap(),
            logior: allocator.new_small_number(25).unwrap(),
            logxor: allocator.new_small_number(26).unwrap(),
            lognot: allocator.new_small_number(27).unwrap(),
            point_add: allocator.new_small_number(29).unwrap(),
            pubkey_for_exp: allocator.new_small_number(30).unwrap(),
            not: allocator.new_small_number(32).unwrap(),
            any: allocator.new_small_number(33).unwrap(),
            all: allocator.new_small_number(34).unwrap(),
            rem: allocator.new_small_number(61).unwrap(),
        }
    }
}
